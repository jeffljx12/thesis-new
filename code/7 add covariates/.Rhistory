#ra2_i.c = ra2_i
#ra3_i.c = ra3_i+ covariate.coeff2*covariate
ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,cov.coeff1=2.9),
na.action = na.omit)
summary(nlme_d3k2)
continuous.cov
5*runif(length(time))
m=20
5*runif(m)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=20,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add one covariate
continuous.cov = 5*runif(m)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff
cov.coeff1=0.3
cov.coeff2=0.5
# random effects
commom_corr = 0.3
Sigma = .1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
for (i in 1:n){
# random effects alpha0, beta0, beta1
# r1_i = random_effects[i,1]*500
r1_i = 0
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# parameters for transformed time
r2_i.c = r2_i+continuous.cov*cov.coeff1
r3_i.c = r3_i+continuous.cov*cov.coeff2
#r3_i.c = r3_i
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# construct same curve using bspline
# bspline_d3k2 =  bsplineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
#                              tau=tau,boundary=c(-20,40),degree=3,beta=c(10,20,100,1000,3000),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov,
transformedT = (time-r2_i.c)/exp(r3_i.c),
y.spline_d3k2 = spline_d3k2
#y.bspline_d3k2 = bspline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
View(sim.dt)
source('C:/Users/jeffl/Desktop/thesis git/thesis-new/code/7 add covariates/makeDT.R')
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
#ra3_i.c = ra3_i+ covariate.coeff2*covariate
ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,cov.coeff1=2.9),
na.action = na.omit)
summary(nlme_d3k2)
View(sim.dt)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=20,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add one covariate
continuous.cov = 5*runif(m)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff
cov.coeff1=0.3
cov.coeff2=0.5
# random effects
commom_corr = 0.3
Sigma = .1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
for (i in 1:n){
# random effects alpha0, beta0, beta1
# r1_i = random_effects[i,1]*500
r1_i = 0
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# parameters for transformed time
r2_i.c = r2_i+continuous.cov*cov.coeff1
r3_i.c = r3_i+continuous.cov*cov.coeff2
#r3_i.c = r3_i
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = r2_i.c,intercept.y=r1_i,speed=r3_i.c,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# construct same curve using bspline
# bspline_d3k2 =  bsplineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
#                              tau=tau,boundary=c(-20,40),degree=3,beta=c(10,20,100,1000,3000),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov,
transformedT = (time-r2_i.c)/exp(r3_i.c),
y.spline_d3k2 = spline_d3k2
#y.bspline_d3k2 = bspline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
View(sim.dt)
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
#ra3_i.c = ra3_i+ covariate.coeff2*covariate
ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,cov.coeff1=2.9),
na.action = na.omit)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=20,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add one covariate
continuous.cov = 5*runif(m)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff
cov.coeff1=0.3
cov.coeff2=0.5
# random effects
commom_corr = 0.3
Sigma = .1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
for (i in 1:n){
# random effects alpha0, beta0, beta1
# r1_i = random_effects[i,1]*500
r1_i = 0
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# parameters for transformed time
r2_i.c = r2_i+continuous.cov*cov.coeff1
#r3_i.c = r3_i+continuous.cov*cov.coeff2
r3_i.c = r3_i
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = r2_i.c,intercept.y=r1_i,speed=r3_i.c,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# construct same curve using bspline
# bspline_d3k2 =  bsplineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
#                              tau=tau,boundary=c(-20,40),degree=3,beta=c(10,20,100,1000,3000),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov,
transformedT = (time-r2_i.c)/exp(r3_i.c),
y.spline_d3k2 = spline_d3k2
#y.bspline_d3k2 = bspline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
#ra3_i.c = ra3_i+ covariate.coeff2*covariate
ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,cov.coeff1=2.9),
na.action = na.omit)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,cov.coeff1=0.2),
na.action = na.omit)
summary(nlme_d3k2)
source('C:/Users/jeffl/Desktop/thesis git/thesis-new/code/7 add covariates/makeDT.R')
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=20,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add one covariate
continuous.cov = 5*runif(m)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff
cov.coeff1=0.3
cov.coeff2=0.5
# random effects
commom_corr = 0.3
Sigma = .1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
for (i in 1:n){
# random effects alpha0, beta0, beta1
# r1_i = random_effects[i,1]*500
r1_i = 0
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# parameters for transformed time
r2_i.c = r2_i+continuous.cov*cov.coeff1
r3_i.c = r3_i+continuous.cov*cov.coeff2
#r3_i.c = r3_i
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = r2_i.c,intercept.y=r1_i,speed=r3_i.c,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# construct same curve using bspline
# bspline_d3k2 =  bsplineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
#                              tau=tau,boundary=c(-20,40),degree=3,beta=c(10,20,100,1000,3000),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov,
transformedT = (time-r2_i.c)/exp(r3_i.c),
y.spline_d3k2 = spline_d3k2
#y.bspline_d3k2 = bspline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1,cov.coeff2
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
ra3_i.c = ra3_i+ covariate*cov.coeff2
#ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1,cov.coeff2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1+cov.coeff2 ~1,
random = ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,
cov.coeff1=0.2,cov.coeff2 =0.3),
na.action = na.omit)
summary(nlme_d3k2)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=20,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add one covariate
continuous.cov = 5*runif(m)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff
cov.coeff1=0.3
cov.coeff2=0.5
# random effects
commom_corr = 0.3
Sigma = .1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
for (i in 1:n){
# random effects alpha0, beta0, beta1
r1_i = random_effects[i,1]*500
#r1_i = 0
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# parameters for transformed time
r2_i.c = r2_i+continuous.cov*cov.coeff1
r3_i.c = r3_i+continuous.cov*cov.coeff2
#r3_i.c = r3_i
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = r2_i.c,intercept.y=r1_i,speed=r3_i.c,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# construct same curve using bspline
# bspline_d3k2 =  bsplineCurve(time,intercept.x = r2_i,intercept.y=r1_i,speed=r3_i,
#                              tau=tau,boundary=c(-20,40),degree=3,beta=c(10,20,100,1000,3000),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov,
transformedT = (time-r2_i.c)/exp(r3_i.c),
y.spline_d3k2 = spline_d3k2
#y.bspline_d3k2 = bspline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1,cov.coeff2
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
ra3_i.c = ra3_i+ covariate*cov.coeff2
#ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1,cov.coeff2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1+cov.coeff2 ~1,
random = beta0 +ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,
cov.coeff1=0.2,cov.coeff2 =0.3),
na.action = na.omit)
summary(nlme_d3k2)
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,ra2_i,ra3_i,tau1,tau2,
covariate,cov.coeff1,cov.coeff2
){
ra2_i.c = ra2_i+ covariate*cov.coeff1
#ra2_i.c = ra2_i
ra3_i.c = ra3_i+ covariate*cov.coeff2
#ra3_i.c = ra3_i
time_i = (time - ra2_i.c)/exp(ra3_i.c)
return(beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(age,beta0,beta1,beta2,beta3,beta4,beta5,
ra2_i,ra3_i,tau1=7.3,tau2=14.6,
var1,
cov.coeff1,cov.coeff2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3+beta4+beta5+cov.coeff1+cov.coeff2 ~1,
random = beta0 +ra2_i +ra3_i~1,  #random intercept works when ra1_i is sufficiently large
groups = ~ id,
start = c(beta0=18, beta1=8,beta2=9,beta3=0.8,beta4=0.3,beta5=-0.9,
cov.coeff1=0.2,cov.coeff2 =0.3),
na.action = na.omit)
summary(nlme_d3k2)
source('C:/Users/jeffl/Desktop/thesis git/thesis-new/code/7 add covariates/makeDT.R')
