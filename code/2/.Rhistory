fit.nlmer
Th . start <- c( lKe = -2.5 , lKa = 0.5 , lCl = -3)
>m1 <- nlmer ( conc ~ SSfol ( Dose , Time , lKe , lKa , lCl ) ~
0+ lKe + lKa + lCl +(0+ lKe | Subject )+(0+ lKa | Subject )
+(0+ lCl | Subject ), nAGQ =0 , Theoph ,
start = Th . start , verbose = TRUE )
Th . start <- c( lKe = -2.5 , lKa = 0.5 , lCl = -3)
Th.start <- c( lKe = -2.5 , lKa = 0.5 , lCl = -3)
nlmer ( conc ~ SSfol ( Dose , Time , lKe , lKa , lCl ) ~
0+ lKe + lKa + lCl +(0+ lKe | Subject )+(0+ lKa | Subject )
+(0+ lCl | Subject ), nAGQ =0 , Theoph ,
start = Th . start , verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~
0+ lKe + lKa + lCl +(0+ lKe | Subject )+(0+ lKa | Subject )
+(0+ lCl | Subject ),nAGQ =0 ,Theoph,
start = Th.start,verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~
0+ lKe +  lCl +(0+ lKe | Subject )+(0+ lKa | Subject )
+(0+ lCl | Subject ),nAGQ =0 ,Theoph,
start = Th.start,verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~
0+ lKe + lKa + lCl +(0+ lKa | Subject )
+(0+ lCl | Subject ),nAGQ =0 ,Theoph,
start = Th.start,verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~
lKa + lCl +(0+ lKa | Subject )
+(0+ lCl | Subject ),nAGQ =0 ,Theoph,
start = Th.start,verbose = TRUE )
data(Theoph)
Theoph
SSfol2 = deriv( ~ Dose * exp(lKe+lKa-lCl) * (exp(-exp(lKe)*Time) - exp(-exp(lKa)*Time))/ (exp(lKa) - exp(lKe)),
namevec=c('lKe','lKa', 'lCl'),
function.arg=c('Dose','Time','lKe','lKa', 'lCl'))
test2=nlmer ( conc ~ SSfol2( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,data=Theoph,
start = Th.start,verbose = TRUE )
test2
test1 =nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,data=Theoph,
start = Th.start,verbose = TRUE )
test1
library(lme4)
nlmer ( conc ~ SSfol2( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,
data=Theoph,
start = Th.start,
verbose = TRUE )
nlmer ( conc ~ SSfol2( Dose ,Time ,lKe ,lKa ,lCl ) ~ (0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,
data=Theoph,
start = Th.start,
verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lke+lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,data=Theoph,
start = Th.start,verbose = TRUE )
nlmer ( conc ~ SSfol ( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lKe+lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,data=Theoph,
start = Th.start,verbose = TRUE )
nlmer ( conc ~ SSfol2( Dose ,Time ,lKe ,lKa ,lCl ) ~ (0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,
data=Theoph,
start = Th.start,
verbose = TRUE )
?nlmer
nlmer ( conc ~ SSfol2( Dose ,Time ,lKe ,lKa ,lCl ) ~ lKa + lKe+lCl +(0+ lKa | Subject )+(0+ lCl | Subject ),
nAGQ =0 ,
data=Theoph,
start = Th.start,
verbose = TRUE )
n=50
# time points for subject i
common_t=seq(1,20,length.out = 6)
sim.dt2 =data.frame()
for (i in 1:n){
# random effects alpha0, beta0, beta1
Sigma = matrix(c(1,0,0,
0,1,0,
0,0,1),
3,byrow=T)
random_effects_i = mvrnorm(n = 1, mu = rep(0, 3), Sigma = Sigma)
alpha0_i = random_effects_i[1]
beta0_i = random_effects_i[2]
beta1_i = random_effects_i[3]
# transformed time
time_i = (common_t-beta0_i)
#time_i = (common_t-beta0_i)/beta1
# calculate y
fixed.b1 =0.3
fixed.b2= 0.5
y.spline <-  fixed.b1 *(time_i)+fixed.b1^2 *(time_i)+fixed.b2  + rnorm(n=length(common_t),mean=0,sd=0.1) #+fixed.b2* time_i^2
# make data
dt_i=data.frame(id=i,
time=common_t,
y=y.spline
)
sim.dt2= rbind(sim.dt2,dt_i)
}
# define model
model.spline2=function(time,fixed.b1,fixed.b2,beta0){
time_i= time-beta0
fixed.b1 *(time_i)+fixed.b1^2 *(time_i)+fixed.b2
}
#fit nlme
fitNlme2 = nlme(y ~ model.spline2(time,fixed.b1,fixed.b2,beta0),  #fixed.b1 *(time-beta0)/beta1 ,
data = sim.dt2,
fixed = fixed.b1 + fixed.b2 ~1,
random = beta0  ~1,
groups = ~ id,
start = c(0.2,0.3),
verbose=F
)
summary(fitNlme2)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
# -------------------- make data ----------------------#
set.seed(123)
# number of subjects
n = 50
# number of visits
m = 20
# common time
time = seq(1,20,length.out = m)
# knots
tau1 = time[ceiling(m/3)]
tau2 = time[ceiling(m/3*2)]
# fixed effects
b0 = 20
b1 = 10
b2 = 5
b3 = 1
sim.dt =data.frame()
for (i in 1:n){
# random effects alpha0, beta0, beta1
commom_corr = 0.30  # corr increase may cause failure
Sigma = matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects_i = mvrnorm(n = 1, mu = rep(0, 3), Sigma = Sigma)
r1_i = random_effects_i[1]
r2_i = random_effects_i[2]
r3_i = random_effects_i[3]
# transformed time
time_i = (time-r2_i)/exp(r3_i)
# calculate outcome:
# degree = 1, 1 knot
spline_d1k1 = b0+b1*time_i+b2*ifelse(time_i-tau1>0,time_i-tau1,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d1k1 =  bs(time_i,knots = tau1,degree=1, intercept=T) %*% c(b0,b1,b2) + rnorm(n=length(time_i),mean=0,sd = 1)
# degree = 2, 1 knot
spline_d2k1 = b0+b1*time_i+b2*time_i^2+b3*ifelse(time_i-tau1>0,(time_i-tau1)^2,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d2k1 =  bs(time_i,knots = tau1,degree=2, intercept=T) %*% c(b0,b1,b2,b3) + rnorm(n=length(time_i),mean=0,sd = 1)
# make data
dt_i=data.frame(id=i,
age=time ,
transformedT = time_i,
y.spline_d1k1 = spline_d1k1,
y.bspline_d1k1= bspline_d1k1,
y.spline_d2k1 = spline_d2k1,
y.bspline_d2k1 = bspline_d2k1
)
sim.dt = rbind(sim.dt,dt_i)
}
#---------------------------------- nlme (assume knots are known) --------------------------_#
# has to specify the value of tau1, cannot use 'tau1' directly?
rm(nlme_d1k1)
tau1
nlme_d1k1 <- nlme(y.spline_d1k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3),0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 ~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3),
na.action = na.omit)
summary(nlme_d1k1)
plot(sim.dt$y.spline_d1k1 ~fitted(nlme_d1k1) )
rm(nlme_d2k1)
nlme_d2k1 <- nlme(y.spline_d2k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*((age-ra2_i)/exp(ra3_i))^2+
beta3*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3)^2,0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3,0.8),
na.action = na.omit)
summary(nlme_d2k1)
plot(sim.dt$y.spline_d2k1 ~ fitted(nlme_d2k1))
input.spline_d1k1=function(time,beta0,beta1,beta2,ra1_i,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2)
basis= bs((time-ra2_i)/exp(ra3_i), degree=1,knots=7.3 ,intercept=T)
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff*as.matrix(basis)))
}
#Error in chol.default((value + t(value))/2) :
#the leading minor of order 1 is not positive definite
nlme_bsd1k1 = nlme(y~input.spline_d1k1(age,beta0,beta1,beta2,ra1_i,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
View(sim.dt)
nlme_bsd1k1 = nlme(y.bspline_d1k1~input.spline_d1k1(age,beta0,beta1,beta2,ra1_i,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
t(matrix(rep(1,3),ncol=3)
basis2= bs(time, degree=1,knots=7.3 ,intercept=T)
basis2= bs(time, degree=1,knots=7.3 ,intercept=T)
spline.coeff2=c(1,2,3)
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff2*as.matrix(basis)))
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff2*as.matrix(basis2)))
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff2*as.matrix(basis2)))+1
input.spline_d1k1=function(time,beta0,beta1,beta2,ra1_i,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2)
basis= bs((time-ra2_i)/exp(ra3_i), degree=1,knots=7.3 ,intercept=T)
ra1_i+t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff*as.matrix(basis)))
}
#Error in chol.default((value + t(value))/2) :
#the leading minor of order 1 is not positive definite
nlme_bsd1k1 = nlme(y.bspline_d1k1~input.spline_d1k1(age,beta0,beta1,beta2,ra1_i,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra1_i+ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
# try b-spline
input.spline_d1k1=function(time,beta0,beta1,beta2,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2)
basis= bs((time-ra2_i)/exp(ra3_i), degree=1,knots=7.3 ,intercept=T)
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff*as.matrix(basis)))
}
#Error in chol.default((value + t(value))/2) :
#the leading minor of order 1 is not positive definite
nlme_bsd1k1 = nlme(y.bspline_d1k1~input.spline_d1k1(age,beta0,beta1,beta2,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
View(sim.dt)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
# -------------------- make data ----------------------#
set.seed(123)
# number of subjects
n = 50
# number of visits
m = 20
# common time
time = seq(1,20,length.out = m)
# knots
tau1 = time[ceiling(m/3)]
tau2 = time[ceiling(m/3*2)]
# fixed effects
b0 = 20
b1 = 10
b2 = 5
b3 = 1
sim.dt =data.frame()
for (i in 1:n){
# random effects alpha0, beta0, beta1
commom_corr = 0 #0.30  # corr increase may cause failure
Sigma = matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects_i = mvrnorm(n = 1, mu = rep(0, 3), Sigma = Sigma)
r1_i = random_effects_i[1]
r2_i = random_effects_i[2]
r3_i = random_effects_i[3]
# transformed time
time_i = (time-r2_i)/exp(r3_i)
# calculate outcome:
# degree = 1, 1 knot
spline_d1k1 = b0+b1*time_i+b2*ifelse(time_i-tau1>0,time_i-tau1,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d1k1 =  bs(time_i,knots = tau1,degree=1, intercept=T) %*% c(b0,b1,b2) + rnorm(n=length(time_i),mean=0,sd = 1)
# degree = 2, 1 knot
spline_d2k1 = b0+b1*time_i+b2*time_i^2+b3*ifelse(time_i-tau1>0,(time_i-tau1)^2,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d2k1 =  bs(time_i,knots = tau1,degree=2, intercept=T) %*% c(b0,b1,b2,b3) + rnorm(n=length(time_i),mean=0,sd = 1)
# make data
dt_i=data.frame(id=i,
age=time ,
transformedT = time_i,
y.spline_d1k1 = spline_d1k1,
y.bspline_d1k1= bspline_d1k1,
y.spline_d2k1 = spline_d2k1,
y.bspline_d2k1 = bspline_d2k1
)
sim.dt = rbind(sim.dt,dt_i)
}
#---------------------------------- nlme (assume knots are known) --------------------------_#
# has to specify the value of tau1, cannot use 'tau1' directly?
rm(nlme_d1k1)
tau1
nlme_d1k1 <- nlme(y.spline_d1k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3),0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 ~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3),
na.action = na.omit)
summary(nlme_d1k1)
plot(sim.dt$y.spline_d1k1 ~fitted(nlme_d1k1) )
rm(nlme_d2k1)
nlme_d2k1 <- nlme(y.spline_d2k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*((age-ra2_i)/exp(ra3_i))^2+
beta3*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3)^2,0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3,0.8),
na.action = na.omit)
summary(nlme_d2k1)
plot(sim.dt$y.spline_d2k1 ~ fitted(nlme_d2k1))
# estimates for fixed effect are alright, corr for random effects are not.
# however the fitted values look good
# try b-spline
input.spline_d1k1=function(time,beta0,beta1,beta2,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2)
basis= bs((time-ra2_i)/exp(ra3_i), degree=1,knots=7.3 ,intercept=T)
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff*as.matrix(basis)))
}
nlme_bsd1k1 = nlme(y.bspline_d1k1~input.spline_d1k1(age,beta0,beta1,beta2,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
nlme_d1k1 <- nlme(y.spline_d1k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3),0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 ~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3),
na.action = na.omit)
set.seed(123)
# number of subjects
n = 50
# number of visits
m = 20
# common time
time = seq(1,20,length.out = m)
# knots
tau1 = time[ceiling(m/3)]
tau2 = time[ceiling(m/3*2)]
# fixed effects
b0 = 20
b1 = 10
b2 = 5
b3 = 1
sim.dt =data.frame()
for (i in 1:n){
# random effects alpha0, beta0, beta1
commom_corr = 0.3 #0.30  # corr increase may cause failure
Sigma = matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects_i = mvrnorm(n = 1, mu = rep(0, 3), Sigma = Sigma)
r1_i = random_effects_i[1]
r2_i = random_effects_i[2]
r3_i = random_effects_i[3]
# transformed time
time_i = (time-r2_i)/exp(r3_i)
# calculate outcome:
# degree = 1, 1 knot
spline_d1k1 = b0+b1*time_i+b2*ifelse(time_i-tau1>0,time_i-tau1,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d1k1 =  bs(time_i,knots = tau1,degree=1, intercept=T) %*% c(b0,b1,b2) + rnorm(n=length(time_i),mean=0,sd = 1)
# degree = 2, 1 knot
spline_d2k1 = b0+b1*time_i+b2*time_i^2+b3*ifelse(time_i-tau1>0,(time_i-tau1)^2,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d2k1 =  bs(time_i,knots = tau1,degree=2, intercept=T) %*% c(b0,b1,b2,b3) + rnorm(n=length(time_i),mean=0,sd = 1)
# make data
dt_i=data.frame(id=i,
age=time ,
transformedT = time_i,
y.spline_d1k1 = spline_d1k1,
y.bspline_d1k1= bspline_d1k1,
y.spline_d2k1 = spline_d2k1,
y.bspline_d2k1 = bspline_d2k1
)
sim.dt = rbind(sim.dt,dt_i)
}
#---------------------------------- nlme (assume knots are known) --------------------------_#
# has to specify the value of tau1, cannot use 'tau1' directly?
rm(nlme_d1k1)
tau1
nlme_d1k1 <- nlme(y.spline_d1k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3),0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 ~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3),
na.action = na.omit)
summary(nlme_d1k1)
set.seed(123)
# number of subjects
n = 50
# number of visits
m = 20
# common time
time = seq(1,20,length.out = m)
# knots
tau1 = time[ceiling(m/3)]
tau2 = time[ceiling(m/3*2)]
# fixed effects
b0 = 20
b1 = 10
b2 = 5
b3 = 1
sim.dt =data.frame()
for (i in 1:n){
# random effects alpha0, beta0, beta1
commom_corr = 0#0.30  # corr increase may cause failure
Sigma = matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects_i = mvrnorm(n = 1, mu = rep(0, 3), Sigma = Sigma)
r1_i = random_effects_i[1]
r2_i = random_effects_i[2]
r3_i = random_effects_i[3]
# transformed time
time_i = (time-r2_i)/exp(r3_i)
# calculate outcome:
# degree = 1, 1 knot
spline_d1k1 = b0+b1*time_i+b2*ifelse(time_i-tau1>0,time_i-tau1,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d1k1 =  bs(time_i,knots = tau1,degree=1, intercept=T) %*% c(b0,b1,b2) + rnorm(n=length(time_i),mean=0,sd = 1)
# degree = 2, 1 knot
spline_d2k1 = b0+b1*time_i+b2*time_i^2+b3*ifelse(time_i-tau1>0,(time_i-tau1)^2,0) + rnorm(n=length(time_i),mean=0,sd = 1)
bspline_d2k1 =  bs(time_i,knots = tau1,degree=2, intercept=T) %*% c(b0,b1,b2,b3) + rnorm(n=length(time_i),mean=0,sd = 1)
# make data
dt_i=data.frame(id=i,
age=time ,
transformedT = time_i,
y.spline_d1k1 = spline_d1k1,
y.bspline_d1k1= bspline_d1k1,
y.spline_d2k1 = spline_d2k1,
y.bspline_d2k1 = bspline_d2k1
)
sim.dt = rbind(sim.dt,dt_i)
}
#---------------------------------- nlme (assume knots are known) --------------------------_#
# has to specify the value of tau1, cannot use 'tau1' directly?
rm(nlme_d1k1)
tau1
nlme_d1k1 <- nlme(y.spline_d1k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3),0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 ~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3),
na.action = na.omit)
rm(nlme_d2k1)
nlme_d2k1 <- nlme(y.spline_d2k1 ~ ra1_i + beta0+
beta1*((age-ra2_i)/exp(ra3_i))+
beta2*((age-ra2_i)/exp(ra3_i))^2+
beta3*ifelse((age-ra2_i)/exp(ra3_i)-7.3 > 0,((age-ra2_i)/exp(ra3_i)-7.3)^2,0),
data = sim.dt,
fixed = beta0 + beta1 + beta2 +beta3~1,
random = ra1_i + ra2_i+ra3_i~1,
groups = ~ id,
start = c(18, 8,3,0.8),
na.action = na.omit)
summary(nlme_d2k1)
input.spline_d1k1=function(time,beta0,beta1,beta2,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2)
basis= bs((time-ra2_i)/exp(ra3_i), degree=1,knots=7.3 ,intercept=T)
t(matrix(rep(1,3),ncol=3) %*% t(spline.coeff*as.matrix(basis)))
}
nlme_bsd1k1 = nlme(y.bspline_d1k1~input.spline_d1k1(age,beta0,beta1,beta2,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3)
)
input.spline_d2k1=function(time,beta0,beta1,beta2,beta3,ra2_i,ra3_i){
spline.coeff = c(beta0,beta1,beta2,beta3)
basis= bs((time-ra2_i)/exp(ra3_i), degree=2,knots=7.3 ,intercept=T)
t(matrix(rep(1,4),ncol=4) %*% t(spline.coeff*as.matrix(basis)))
}
nlme_bsd2k1 = nlme(y.bspline_d2k1~input.spline_d2k1(age,beta0,beta1,beta2,beta3,ra2_i,ra3_i),
data = sim.dt,
fixed = beta0 + beta1 + beta2+beta3  ~1,
random = ra2_i+ra3_i ~1,
groups = ~ id,
start = c(18, 8,3,0.9)
)
