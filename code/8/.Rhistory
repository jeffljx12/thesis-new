library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=40,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add time-indep covariates for all n subjects
continuous.cov1 = runif(n)
continuous.cov2 = runif(n)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff (in order to maintain small changes to time, these coeffs should not be big?)
cov.coeff.f1=5
cov.coeff.f2=0.1
# # random effects: random intercept alpha0, beta0, beta1
commom_corr = 0.3
Sigma = 0.1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
# random effects: random slope for covariates
commom_corr2 = 0.4
Sigma2 = 0.1*matrix(c(1,commom_corr2,
commom_corr2,1),
2,byrow=T)
random_effects2 = mvrnorm(n = n, mu = rep(0, 2), Sigma = Sigma2, empirical = TRUE)
for (i in 1:n){
# random effects: random intercept alpha0, beta0, beta1
r1_i = random_effects[i,1]*500
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# random effects: random slope for covariates
cov.coeff.r1 = random_effects2[i,1]
cov.coeff.r2 = random_effects2[i,2]
# parameters for transformed time: alpha/beta = random.intercept + fix*cov+random.slope*cov
intercept.y = r1_i
intercept.x = r2_i + continuous.cov1[i] * cov.coeff.f1 #+ continuous.cov1[i] * cov.coeff.r1
speed = r3_i + continuous.cov2[i] * cov.coeff.f2 #+ continuous.cov2[i] * cov.coeff.r2
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = intercept.x,intercept.y=intercept.y,speed=speed,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov1[i],
var2 = continuous.cov2[i],
transformedT = (time-intercept.x)/exp(speed),
y.spline_d3k2 = spline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
# 1. random intercepts only
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2
){
intercept.x = ra2_i + covariate1 * cov.coef.f1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return( ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k2)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i, ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~1,
random = ra1_i + ra2_i + ra3_i  ~ 1 |id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.001,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k2)
# 2. random intercepts + one random slope
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2,
cov.coef.r1
){
intercept.x = ra2_i + covariate1 * cov.coef.f1 + covariate1 * cov.coef.r1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return(ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k2)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2,
cov.coef.r1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~ 1,
random = ra1_i + ra2_i + ra3_i  + cov.coef.r1 ~ 1 | id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.01,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k2)
# 1. random intercepts only
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2
){
intercept.x = ra2_i + covariate1 * cov.coef.f1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return( ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k2)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i, ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~1,
random = ra1_i + ra2_i + ra3_i  ~ 1 |id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.001,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k2)
library(splines)
library(tidyverse)
library(MASS)
library(nlme)
library(lme4)
source('curve function.r')
# -------------------- make data ----------------------#
makeDataset = function(n=50,m=40,seed=123,tau=c(7.3,14.6)) {
set.seed(seed)
sim.dt =data.frame()
# common time
time = seq(1,20,length.out = m)
# add time-indep covariates for all n subjects
continuous.cov1 = runif(n)
continuous.cov2 = runif(n)
# knots
#tau1 = time[ceiling(m/3)]
#tau2 = time[ceiling(m/3*2)]
# fixed effects: spline coeff
b0 = 20
b1 = 10
b2 = 7
b3 = 0.7
b4= 0.5
b5= -1
# fixed effects: covariate coeff (in order to maintain small changes to time, these coeffs should not be big?)
cov.coeff.f1=5
cov.coeff.f2=0.1
# # random effects: random intercept alpha0, beta0, beta1
commom_corr = 0.3
Sigma = 0.1*matrix(c(1,commom_corr,commom_corr,
commom_corr,1,commom_corr,
commom_corr,commom_corr,1),
3,byrow=T)
random_effects = mvrnorm(n = n, mu = rep(0, 3), Sigma = Sigma, empirical = TRUE)
# random effects: random slope for covariates
commom_corr2 = 0.4
Sigma2 = 0.1*matrix(c(1,commom_corr2,
commom_corr2,1),
2,byrow=T)
random_effects2 = mvrnorm(n = n, mu = rep(0, 2), Sigma = Sigma2, empirical = TRUE)
for (i in 1:n){
# random effects: random intercept alpha0, beta0, beta1
r1_i = random_effects[i,1]*500
r2_i = random_effects[i,2]
r3_i = random_effects[i,3]
# random effects: random slope for covariates
cov.coeff.r1 = random_effects2[i,1]
cov.coeff.r2 = random_effects2[i,2]
# parameters for transformed time: alpha/beta = random.intercept + fix*cov+random.slope*cov
intercept.y = r1_i
intercept.x = r2_i + continuous.cov1[i] * cov.coeff.f1 #+ continuous.cov1[i] * cov.coeff.r1
speed = r3_i + continuous.cov2[i] * cov.coeff.f2 #+ continuous.cov2[i] * cov.coeff.r2
# calculate outcome:
# degree = 3, 2 knot2
spline_d3k2 = splineCurve(time,intercept.x = intercept.x,intercept.y=intercept.y,speed=speed,
tau=tau,degree=3,beta=c(b0,b1,b2,b3),gamma=c(b4,b5),errorTerm=T)
# make data
dt_i=data.frame(id=i,
#tau = tau1*exp(r3_i)+r2_i,
age=time ,
var1 = continuous.cov1[i],
var2 = continuous.cov2[i],
transformedT = (time-intercept.x)/exp(speed),
y.spline_d3k2 = spline_d3k2
)
sim.dt = rbind(sim.dt,dt_i)
}
return(sim.dt)
}
sim.dt = makeDataset()
# 1. random intercepts only
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2
){
intercept.x = ra2_i + covariate1 * cov.coef.f1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return( ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k2)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i, ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~1,
random = ra1_i + ra2_i + ra3_i  ~ 1 |id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.001,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k2)
# 2. random intercepts + one random slope
d3k2_model2 = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2,
cov.coef.r1
){
intercept.x = ra2_i + covariate1 * cov.coef.f1 + covariate1 * cov.coef.r1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return(ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k22)
nlme_d3k22 = nlme(y.spline_d3k2 ~ d3k2_model2(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2,
cov.coef.r1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~ 1,
random = ra1_i + ra2_i + ra3_i  + cov.coef.r1 ~ 1 | id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.01,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k22)
# 1. random intercepts only
d3k2_model = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2
){
intercept.x = ra2_i + covariate1 * cov.coef.f1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return( ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k2)
nlme_d3k2 = nlme(y.spline_d3k2 ~ d3k2_model(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i, ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~1,
random = ra1_i + ra2_i + ra3_i  ~ 1 |id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.001,
msMaxIter =50,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k2)
# 2. random intercepts + one random slope
d3k2_model2 = function(time,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1,tau2,
covariate1,covariate2,cov.coef.f1,cov.coef.f2,
cov.coef.r1
){
intercept.x = ra2_i + covariate1 * cov.coef.f1 + covariate1 * cov.coef.r1
speed = ra3_i+ covariate2 * cov.coef.f2
time_i = (time - intercept.x)/exp(speed)
return(ra1_i + beta0 + beta1*time_i + beta2*time_i^2 + beta3*time_i^3 +
beta4*ifelse(time_i-tau1>0,(time_i-tau1)^3,0) + beta5*ifelse(time_i-tau2>0,(time_i-tau2)^3,0)
)
}
rm(nlme_d3k22)
nlme_d3k22 = nlme(y.spline_d3k2 ~ d3k2_model2(time = age,beta0,beta1,beta2,beta3,beta4,beta5,
ra1_i,ra2_i,ra3_i,tau1=7.3,tau2=14.6,
covariate1 = var1, covariate2 = var2,
cov.coef.f1,cov.coef.f2,
cov.coef.r1
),
data = sim.dt,
fixed = beta0 + beta1 + beta2 + beta3 + beta4 + beta5 +
cov.coef.f1 + cov.coef.f2 ~ 1,
random = ra1_i + ra2_i + ra3_i  + cov.coef.r1 ~ 1 | id,
start = c(beta0 = 18, beta1 = 8,beta2 = 9,beta3 = 0.8,beta4 = 0.3,beta5 = -0.9,
cov.coef.f1 = 4,cov.coef.f2 = 0.2),
control = nlmeControl(pnlsTol = 0.01,
maxIter = 100,
msMaxIter =100,
msVerbose = TRUE),
na.action = na.omit)
summary(nlme_d3k22)
